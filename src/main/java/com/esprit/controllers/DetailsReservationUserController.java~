package com.esprit.controllers;

import com.esprit.modules.Espace;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;

import java.time.LocalDate;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import java.io.File;
import java.io.IOException;

import com.esprit.modules.Espace;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;

import java.time.LocalDate;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import java.io.File;
import java.io.IOException;

public class DetailsReservationUserController {

    private String userEmail;

    public void setUserEmail(String email) {
        this.userEmail = email;
    }

    // FXML variables
    @FXML
    private Button btnRetour;

    @FXML
    private Button btnAnnulerReservation;

    @FXML
    private Label nomEspaceLabel;

    @FXML
    private Label typeEspaceLabel;

    @FXML
    private Label capaciteEspaceLabel;

    @FXML
    private Label localisationEspaceLabel;

    @FXML
    private Label prixEspaceLabel;

    @FXML
    private Label reservationIdLabel;

    @FXML
    private Label dateDebutLabel;

    @FXML
    private Label dateFinLabel;

    @FXML
    private Label statutLabel;

    // Method to handle the return action
    @FXML
    private void retourMesReservations(javafx.event.ActionEvent event) {
        chargerInterface("/MesReservationsClient.fxml", event);
    }

    private void chargerInterface(String fxmlPath, javafx.event.ActionEvent event) {
        try {
            javafx.fxml.FXMLLoader loader = new javafx.fxml.FXMLLoader(getClass().getResource(fxmlPath));
            javafx.scene.Parent root = loader.load();
            javafx.stage.Stage stage = (javafx.stage.Stage) ((javafx.scene.Node) event.getSource()).getScene().getWindow();
            javafx.scene.Scene scene = new javafx.scene.Scene(root);
            stage.setScene(scene);
            stage.show();
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
    }

    // Method to handle reservation cancellation
    @FXML
    private void annulerReservation() {
        // Implement reservation cancellation logic
        System.out.println("Réservation annulée");

        // Send cancellation confirmation email
        String subject = "Confirmation d'annulation de réservation";
        String body = "Bonjour,\n\nVotre réservation a été annulée avec succès.\n\nCordialement.";

        com.esprit.services.EmailService emailService = new com.esprit.services.EmailService();
        try {
            if (userEmail == null || userEmail.isEmpty()) {
                throw new IllegalArgumentException("Adresse email utilisateur invalide.");
            }
            emailService.sendEmail(userEmail, subject, body);
            // Show success alert
            javafx.scene.control.Alert alert = new javafx.scene.control.Alert(javafx.scene.control.Alert.AlertType.INFORMATION);
            alert.setTitle("Annulation");
            alert.setHeaderText(null);
            alert.setContentText("Un email de confirmation d'annulation a été envoyé.");
            alert.showAndWait();
        } catch (Exception e) {
            e.printStackTrace();
            // Show error alert with exception message
            javafx.scene.control.Alert alert = new javafx.scene.control.Alert(javafx.scene.control.Alert.AlertType.ERROR);
            alert.setTitle("Erreur");
            alert.setHeaderText(null);
            alert.setContentText("Erreur lors de l'envoi de l'email de confirmation: " + e.getMessage());
            alert.showAndWait();
        }
    }

    @FXML
    private void downloadPDF() {
        PDDocument document = new PDDocument();
        PDPage page = new PDPage();
        document.addPage(page);

        try (PDPageContentStream contentStream = new PDPageContentStream(document, page)) {
            contentStream.setFont(PDType1Font.HELVETICA_BOLD, 20);
            contentStream.beginText();
            contentStream.newLineAtOffset(50, 750);
            contentStream.showText("Détails de la réservation");
            contentStream.endText();

            contentStream.setFont(PDType1Font.HELVETICA, 14);
            int yPosition = 720;

            String[] labels = {
                "Nom: " + nomEspaceLabel.getText(),
                "Type: " + typeEspaceLabel.getText(),
                "Capacité: " + capaciteEspaceLabel.getText(),
                "Localisation: " + localisationEspaceLabel.getText(),
                "Prix: " + prixEspaceLabel.getText(),
                "Numéro de réservation: " + reservationIdLabel.getText(),
                "Date de début: " + dateDebutLabel.getText(),
                "Date de fin: " + dateFinLabel.getText(),
                "Statut: " + statutLabel.getText()
            };

            for (String label : labels) {
                contentStream.beginText();
                contentStream.newLineAtOffset(50, yPosition);
                contentStream.showText(label);
                contentStream.endText();
                yPosition -= 20;
            }

        } catch (IOException e) {
            e.printStackTrace();
            javafx.scene.control.Alert alert = new javafx.scene.control.Alert(javafx.scene.control.Alert.AlertType.ERROR);
            alert.setTitle("Erreur");
            alert.setHeaderText(null);
            alert.setContentText("Erreur lors de la génération du PDF: " + e.getMessage());
            alert.showAndWait();
            return;
        }

        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Enregistrer le PDF");
        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("PDF Files", "*.pdf"));
        File file = fileChooser.showSaveDialog(new Stage());

        if (file != null) {
            try {
                document.save(file);
                javafx.scene.control.Alert alert = new javafx.scene.control.Alert(javafx.scene.control.Alert.AlertType.INFORMATION);
                alert.setTitle("Succès");
                alert.setHeaderText(null);
                alert.setContentText("PDF enregistré avec succès.");
                alert.showAndWait();
            } catch (IOException e) {
                e.printStackTrace();
                javafx.scene.control.Alert alert = new javafx.scene.control.Alert(javafx.scene.control.Alert.AlertType.ERROR);
                alert.setTitle("Erreur");
                alert.setHeaderText(null);
                alert.setContentText("Erreur lors de l'enregistrement du PDF: " + e.getMessage());
                alert.showAndWait();
            }
        }

        try {
            document.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Method to initialize and set the details for the reservation
    public void initialize(String nom, String type, int capacite, String localisation, double prix,
                           String reservationId, String dateDebut, String dateFin, String statut) {
        nomEspaceLabel.setText(nom);
        typeEspaceLabel.setText(type);
        capaciteEspaceLabel.setText(String.valueOf(capacite));
        localisationEspaceLabel.setText(localisation);
        prixEspaceLabel.setText(String.valueOf(prix));
        reservationIdLabel.setText(reservationId);
        dateDebutLabel.setText(dateDebut);
        dateFinLabel.setText(dateFin);
        statutLabel.setText(statut);
    }

    public void initData(Espace currentEspace, LocalDate dateDebut, LocalDate dateFin) {
        if (currentEspace != null && dateDebut != null && dateFin != null) {
            initialize(
                currentEspace.getNom(),
                currentEspace.getType(),
                currentEspace.getCapacite(),
                currentEspace.getLocalisation(),
                currentEspace.getPrix(),
                "N/A", // reservationId not available here
                dateDebut.toString(),
                dateFin.toString(),
                "Confirmée" // Assuming status is confirmed
            );
        }
    }
}
